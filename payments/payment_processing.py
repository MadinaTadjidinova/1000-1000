import os
from aiogram import types, Router
from aiogram.types import FSInputFile
from config import admin_bot, TOPICS, ADMIN_CHAT_ID, sponsor_bot
from payment_sheets import add_payment
from handlers.receipt_validation import validate_receipt
from handlers.admin_buttons import get_admin_buttons

pay_router = Router()

RECEIPTS_FOLDER = "receipts"
if not os.path.exists(RECEIPTS_FOLDER):
    os.makedirs(RECEIPTS_FOLDER)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Å —á–µ–∫–æ–º
@pay_router.message(lambda message: message.photo and not message.message_thread_id)
async def pay_handler(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ —á–µ–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –≤–Ω–µ —Ç–æ–ø–∏–∫–∞)."""
    
    if not message.caption:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é.")
        return

    args = message.caption.split()
    if len(args) < 1:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `1000` (—Ç–æ–ª—å–∫–æ —Å—É–º–º–∞)")
        return

    amount = args[0]
    user_id = message.from_user.id
    username = message.from_user.username or f"user_{user_id}"

    # üì∏ –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —á–µ–∫–∞
    file_id = message.photo[-1].file_id
    file_info = await message.bot.get_file(file_id)
    file_path = file_info.file_path
    local_path = os.path.join(RECEIPTS_FOLDER, f"{file_id}.jpg")

    try:
        await message.bot.download_file(file_path, local_path)
        is_valid, validation_message = validate_receipt(local_path, amount)

        if is_valid:
            add_payment(user_id, username, amount, "–ß–µ–∫", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")
            await message.answer(f"‚úÖ –ß–µ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –°—É–º–º–∞: {amount} —Å–æ–º.")
        else:
            check_id = add_payment(user_id, username, amount, "–ß–µ–∫ (–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ)", "–û–∂–∏–¥–∞–Ω–∏–µ")
            markup = get_admin_buttons(check_id)

            await admin_bot.send_photo(
                chat_id=ADMIN_CHAT_ID,
                message_thread_id=TOPICS["–ø—Ä–æ–≤–µ—Ä–∫–∞"],
                photo=FSInputFile(local_path),
                caption=f"‚ùó –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —á–µ–∫ –æ—Ç @{username}.\n–ü—Ä–∏—á–∏–Ω–∞: {validation_message}",
                reply_markup=markup
            )

            await message.answer("üîç –í–∞—à —á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

    except Exception as e:
        await message.answer(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞: {str(e)}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –±–µ–∑ –∫–æ–º–∞–Ω–¥ –∏ –±–µ–∑ —Ñ–æ—Ç–æ
@pay_router.message(lambda message: message.text and not message.text.startswith("/") and not message.message_thread_id)
async def fallback_message(message: types.Message):
    """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ —Ñ–æ—Ç–æ ‚Äî –ø–æ–∫–∞–∂–µ–º, —á—Ç–æ –±–æ—Ç —É–º–µ–µ—Ç."""
    await message.answer(
        "ü§ñ –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å:\n"
        "‚Ä¢ üì© –û—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–∑—ã–≤–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/feedback –í–∞—à –æ—Ç–∑—ã–≤`\n"
        "‚Ä¢ üí∞ –û—Ç–ø—Ä–∞–≤–∫–æ–π —á–µ–∫–∞ ‚Äî –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏ —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, `1000`)\n"
        "‚Ä¢ üìö –ú–µ–Ω—é ‚Äî –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É `/menu`",
        parse_mode="Markdown"
    )
