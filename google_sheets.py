# import logging
# import gspread
# # from google.oauth2.service_account import Credentials

# logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# # üîπ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Sheets
# SHEET_ID = "1pFCN-Ca0hiquICvEbSHndymcNCOyosjjZ624_ZYOkzc"
# SCOPES = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]

# creds = Credentials.from_service_account_file("credentials.json", scopes=SCOPES)
# client = gspread.authorize(creds)
# sheet = client.open_by_key(SHEET_ID).sheet1

# # ‚úÖ –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –ø–ª–∞—Ç–µ–∂–µ–π
# def add_payment(user_id, username, amount, method, status="–û–∂–∏–¥–∞–Ω–∏–µ"):
#     from datetime import datetime
#     date = datetime.now().strftime("%Y-%m-%d %H:%M")
#     sheet.append_row([date, username, user_id, amount, method, status])

# # ‚úÖ –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
# def update_payment_status(user_id, amount, status):
#     logging.info(f"üîç update_payment_status –≤—ã–∑–≤–∞–Ω —Å user_id={user_id}, amount={amount}, status={status}")

#     # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
#     values = sheet.get_all_values()

#     # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—É–º–º—É –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
#     amount_str = str(amount).strip()

#     last_matching_row = None  # –°—é–¥–∞ –∑–∞–ø–æ–º–Ω–∏–º –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏

#     for i, row in enumerate(values):
#         if len(row) < 6:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
#             continue

#         sheet_user_id = row[2].strip()
#         sheet_amount = row[3].strip()

#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ user_id –∏ —Å—É–º–º—ã
#         if sheet_user_id == str(user_id) and sheet_amount == amount_str:
#             last_matching_row = i + 1  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É

#     if last_matching_row:
#         logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂ (—Å—Ç—Ä–æ–∫–∞ {last_matching_row})! –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ {status}")
#         sheet.update_cell(last_matching_row, 6, status)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ 6-–π –∫–æ–ª–æ–Ω–∫–µ
#         return True

#     logging.info(f"‚ùå –ü–ª–∞—Ç–µ–∂ —Å user_id={user_id} –∏ amount={amount} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
#     return False

import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client = gspread.authorize(creds)

SPREADSHEET_NAME = "1000x1000-–æ—Ç—á–µ—Ç—ã"
worksheet = client.open(SPREADSHEET_NAME).sheet1  # –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç

def get_current_members():
    try:
        return int(worksheet.acell('A2').value)
    except:
        return 0

def get_raised_amount():
    try:
        return int(worksheet.acell('B2').value)
    except:
        return 0
def get_report_data():
    try:
        members = int(worksheet.acell('B1').value)
        goal = int(worksheet.acell('B2').value)
        amount = int(worksheet.acell('B3').value)
        return members, goal, amount
    except:
        return 0, 0, 0
