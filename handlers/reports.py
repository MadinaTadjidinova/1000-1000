import os
import logging
from aiogram import Bot, types, Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, InputMediaDocument
from config import CHAT_ID, TOPICS

router = Router()

REPORT_TOPIC_ID = TOPICS.get("–æ—Ç—á—ë—Ç", None)
REPORTS_DIR = "reports"
REPORT_MESSAGE_ID = None  # ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç—á–µ—Ç–∞–º–∏

if not os.path.exists(REPORTS_DIR):
    os.makedirs(REPORTS_DIR)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç—á–µ—Ç–∞
def get_reports_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìä –û—Ç—á–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", callback_data="show_events_report")],
            [InlineKeyboardButton(text="üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç", callback_data="show_finance_report")]
        ]
    )

@router.message(lambda message: message.document and message.caption and message.caption.startswith("/upload_report"))
async def handle_report_upload(message: types.Message, bot: Bot):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞, –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è—è –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    global REPORT_MESSAGE_ID

    args = message.caption.split()
    if len(args) < 2 or args[1] not in ["events", "finance"]:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: `/upload_report events` –∏–ª–∏ `/upload_report finance`.")
        return

    report_type = args[1]
    file_path = os.path.join(REPORTS_DIR, f"{report_type}.pdf")

    await bot.download(file=message.document, destination=file_path)

    document = FSInputFile(file_path)
    caption = "üìÑ –î–æ—Å—Ç—É–ø–Ω—ã –æ—Ç—á–µ—Ç—ã: –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ñ–∞–π–ª."

    if REPORT_MESSAGE_ID:
        try:
            await bot.edit_message_media(
                chat_id=CHAT_ID,
                message_id=REPORT_MESSAGE_ID,
                media=InputMediaDocument(media=document, caption=caption),
                reply_markup=get_reports_keyboard()
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            await message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    else:
        msg = await bot.send_document(
            chat_id=CHAT_ID,
            document=document,
            caption=caption,
            message_thread_id=REPORT_TOPIC_ID,
            reply_markup=get_reports_keyboard()
        )
        REPORT_MESSAGE_ID = msg.message_id

    await message.delete()

@router.callback_query(lambda c: c.data in ["show_events_report", "show_finance_report"])
async def report_callback_handler(callback: types.CallbackQuery):
    """–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç—á–µ—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
    global REPORT_MESSAGE_ID

    report_type = "events" if callback.data == "show_events_report" else "finance"
    file_path = os.path.join(REPORTS_DIR, f"{report_type}.pdf")

    if not os.path.exists(file_path):
        await callback.answer("‚ùå –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª.", show_alert=True)
        return

    document = FSInputFile(file_path)
    caption = "üìÑ –î–æ—Å—Ç—É–ø–Ω—ã –æ—Ç—á–µ—Ç—ã: –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ñ–∞–π–ª."

    if REPORT_MESSAGE_ID:
        try:
            await callback.bot.edit_message_media(
                chat_id=CHAT_ID,
                message_id=REPORT_MESSAGE_ID,
                media=InputMediaDocument(media=document, caption=caption),
                reply_markup=get_reports_keyboard()
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            await callback.answer("‚ö† –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

    await callback.answer()
